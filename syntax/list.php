<?php
/**
 * DokuWiki Plugin tagextract (Syntax Component)
 *
 * @license GPL 2 http://www.gnu.org/licenses/gpl-2.0.html
 * @author  Michael Hamann <michael@content-space.de>
 */

// must be run within Dokuwiki
if (!defined('DOKU_INC')) die();

class syntax_plugin_tagextract_list extends DokuWiki_Syntax_Plugin {
    /**
     * @return string Syntax mode type
     */
    public function getType() {
        return 'substition';
    }
    /**
     * @return string Paragraph type
     */
    public function getPType() {
        return 'block';
    }
    /**
     * @return int Sort order - Low numbers go before high numbers
     */
    public function getSort() {
        return 300;
    }

    /**
     * Connect lookup pattern to lexer.
     *
     * @param string $mode Parser mode
     */
    public function connectTo($mode) {
        $this->Lexer->addSpecialPattern('{{tagextracts>.*?}}',$mode,'plugin_tagextract_list');
    }

    /**
     * Handle matches of the tagextract syntax
     *
     * @param string $match The match of the syntax
     * @param int    $state The state of the handler
     * @param int    $pos The position in the document
     * @param Doku_Handler    $handler The handler
     * @return array Data for the renderer
     */
    public function handle($match, $state, $pos, &$handler){
        $tag = substr($match, 14, -2);

        return array($tag);
    }

    /**
     * Render xhtml output or metadata
     *
     * @param string         $mode      Renderer mode (supported modes: xhtml)
     * @param Doku_Renderer  $renderer  The renderer
     * @param array          $data      The data from the handler() function
     * @return bool If rendering was successful.
     */
    public function render($mode, &$renderer, $data) {
        global $ID;

        list($tag) = $data;
        if($mode != 'xhtml') return false;
        $renderer->info['cache'] = false;

        $indexer = idx_get_indexer();
        $pages = $indexer->lookupKey('plugin_tagextract', $tag);

        // only generate a list if there is actually content to be printed
        $outer_wrapper_opened = false;

        natsort($pages);
        foreach ($pages as $page) {
            if (page_exists($page) && auth_quickaclcheck($page) > AUTH_READ && !isHiddenPage($page)) {
                // only print the wrapper for the page if there is actually content for the page (false alarms could be generated by the include plugin)
                $inner_wrapper_opened = false;

                $oldID = $ID;
                $ID = $page;

                $instructions = p_cached_instructions(wikiFN($page), false, $page);
                $num_ins = count($instructions);
                foreach ($instructions as $i => $ins) {
                    if ($ins[0] == 'plugin' && $ins[1][0] == 'tagextract_tag' && array_key_exists($tag, $ins[1][1])) {
                        // search listitem_open before and listitem_close of same level after the tag
                        for ($i_before = $i-1; $i_before > 0 && $instructions[$i_before][0] != 'listitem_open'; --$i_before) ;
                        if ($i_before == 0) {
                            // something went wrong, tag used outside of list environment, continue with next instruction
                            continue;
                        }
                        for ($i_after = $i+1, $o_count = 1; $i_after < $num_ins && $o_count > 0; ++$i_after)  {
                            if ($instructions[$i_after][0] == 'listitem_open') ++$o_count;
                            if ($instructions[$i_after][0] == 'listitem_close') --$o_count;
                        }
                        $include_ins = array_slice($instructions, $i_before, $i_after - $i_before);
                        // correct list item levels
                        $base_level = $include_ins[0][1][0];
                        foreach ($include_ins as $ii => $iins) {
                            if ($iins[0] == 'listitem_open') {
                                $include_ins[$ii][1][0] += 2 - $base_level;
                            }
                        }

                        // now we are sure that content will be printed, check for the wrappers and print them if needed
                        if (!$outer_wrapper_opened) {
                            $renderer->listu_open();
                            $outer_wrapper_opened = true;
                        }

                        if (!$inner_wrapper_opened) {
                            $renderer->listitem_open(1);
                            $renderer->listcontent_open();
                            $renderer->internallink($page);
                            $renderer->listcontent_close();
                            $renderer->listu_open();
                            $inner_wrapper_opened = true;
                        }

                        // print the included content (and hope it won't break anything...)
                        $renderer->nest($include_ins);
                    }
                }

                $ID = $oldID;

                if ($inner_wrapper_opened) {
                    $renderer->listu_close();
                    $renderer->listitem_close();
                }
            }
        }
        if ($outer_wrapper_opened) $renderer->listu_close();

        return true;
    }
}

// vim:ts=4:sw=4:et:
